# daemon off;
http {
    upstream backend1 {
        server 127.0.0.1;
    }

	server {
        server_tokens off;
        

		listen 8088;
		server_name upload.r2.ai;
        
        location /download {
            if ($request_filename ~* ^.*?\.(txt|png|xls|xlsx|csv)$)
              {
                  add_header Access-Control-Allow-Origin "$http_origin";
                  add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
                  add_header Access-Control-Allow-Credentials "true";
                  add_header Access-Control-Allow-Headers "cache-control, content-range, accept, origin, session-id, content-disposition, x-requested-with, content-type, content-description, referer, user-agent, backend";
                 add_header Content-Disposition 'attachment';
                 add_header Content-Type: 'APPLICATION/OCTET-STREAM';
               }
            alias   /r2/fs;
        }

		location /upload {

            # 3 minute pre-flight approval
            add_header Access-Control-Max-Age 180;

            # Headers specifically for the upload module
            if ($request_method = POST)
            {
                add_header Access-Control-Allow-Origin "$http_origin";
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
                add_header Access-Control-Allow-Credentials "true";
                add_header Access-Control-Allow-Headers "cache-control, content-range, accept, origin, session-id, content-disposition, x-requested-with, content-type, content-description, referer, user-agent, backend";
            }

            upload_add_header Access-Control-Allow-Origin "$http_origin";
            upload_add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            upload_add_header Access-Control-Allow-Credentials "true";
            upload_add_header Access-Control-Allow-Headers "cache-control, content-range, accept, origin, session-id, content-disposition, x-requested-with, content-type, content-description, referer, user-agent, backend";

			keepalive_timeout 180 180;
			client_body_timeout 180;
			client_body_buffer_size 16k;
			client_max_body_size 100G;

			gzip on;
			gzip_types text/csv;
			gzip_disable "MSIE [1-6]\.";

			upload_max_file_size 100G;
			upload_buffer_size 16k;
			upload_pass @upload_endpoint;
			upload_pass_args on;
			# Store files to this directory
			# The directory is hashed, subdirectories 0 1 2 3 4 5 6 7 8 9 should exist
			upload_store /r2/upload 1;
			upload_store_access all:rw;
			upload_resumable on;
			upload_state_store /r2/upload/state 1;
			# Set specified fields in request body
			upload_set_form_field name "$upload_file_name";
			upload_set_form_field content_type "$upload_content_type";
			upload_set_form_field path "$upload_tmp_path";
			# Inform backend about hash and size of a file
			upload_aggregate_form_field md5 "$upload_file_md5";
			upload_aggregate_form_field size "$upload_file_size";

			upload_pass_form_field "^submit$|^description$";

			upload_cleanup 400 404 499 500-505;
		}

		location @upload_endpoint {
			proxy_pass http://backend$http_backend;
		}

        location /ping {
            return 200 'pong=$msec';
        }
	}
}

events {}