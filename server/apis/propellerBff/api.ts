/* eslint-disable */
/// <reference path="./custom.d.ts" />
/**
 * propeller-bff
 * The propeller-bff API description
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from "url";
import { Configuration } from "./configuration";
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';

const BASE_PATH = "http://localhost".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *  
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError" = "RequiredError";
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface SendToQueueDto
 */
export interface SendToQueueDto {
    /**
     * 
     * @type {string}
     * @memberof SendToQueueDto
     */
    queue_name?: string;
    /**
     * 
     * @type {any}
     * @memberof SendToQueueDto
     */
    task?: any;
}


/**
 * PropellerApi - axios parameter creator
 * @export
 */
export const PropellerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 队列参数
         * @param {SendToQueueDto} SendToQueueDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendToQueue(SendToQueueDto: SendToQueueDto, options: any = {}): RequestArgs {
            // verify required parameter 'SendToQueueDto' is not null or undefined
            if (SendToQueueDto === null || SendToQueueDto === undefined) {
                throw new RequiredError('SendToQueueDto','Required parameter SendToQueueDto was null or undefined when calling sendToQueue.');
            }
            const localVarPath = `/sendToQueue`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("SendToQueueDto" !== "string" as any) || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(SendToQueueDto || {}) : (SendToQueueDto || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PropellerApi - functional programming interface
 * @export
 */
export const PropellerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 队列参数
         * @param {SendToQueueDto} SendToQueueDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendToQueue(SendToQueueDto: SendToQueueDto, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = PropellerApiAxiosParamCreator(configuration).sendToQueue(SendToQueueDto, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
    }
};

/**
 * PropellerApi - factory interface
 * @export
 */
export const PropellerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 队列参数
         * @param {SendToQueueDto} SendToQueueDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendToQueue(SendToQueueDto: SendToQueueDto, options?: any) {
            return PropellerApiFp(configuration).sendToQueue(SendToQueueDto, options)(axios, basePath);
        },
    };
};

/**
 * PropellerApi - interface
 * @export
 * @interface PropellerApi
 */
export interface PropellerApiInterface {
    /**
     * 队列参数
     * @param {SendToQueueDto} SendToQueueDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropellerApiInterface
     */
    sendToQueue(SendToQueueDto: SendToQueueDto, options?: any): AxiosPromise<string>;

}

/**
 * PropellerApi - object-oriented interface
 * @export
 * @class PropellerApi
 * @extends {BaseAPI}
 */
export class PropellerApi extends BaseAPI implements PropellerApiInterface {
    /**
     * 队列参数
     * @param {SendToQueueDto} SendToQueueDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropellerApi
     */
    public sendToQueue(SendToQueueDto: SendToQueueDto, options?: any) {
        return PropellerApiFp(this.configuration).sendToQueue(SendToQueueDto, options)(this.axios, this.basePath);
    }

}

